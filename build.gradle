/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */
buildscript {
    ext {
        springBootVersion = '2.0.0.RELEASE'
    }
    repositories {
        // 优先级
        mavenLocal()
        maven {
            url "http://maven.aliyun.com/nexus/content/groups/public"
        }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
//        classpath("io.spring.gradle:dependency-management-plugin:${springGradleVersion}")
    }

}
allprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'application'
    group = 'com.xingtan'
    version = '1.0.0'
}

//所有子项目的通用配置
subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    ext {
        springCloudVersion = 'Finchley.M7'
        springGradleVersion = '1.0.4.RELEASE'
        springNetflixVersion = '2.0.0.M7'
        springFeignVersion = '2.0.0.M2'
        springZuulVersion = '2.0.0.M2'
        springSleuthVersion = '2.0.0.M7'

        junitVersion = '4.12'
        okhttpVersion = '3.4.1'
        swaggerVersion = '2.8.0'
        mybatisSpringVersion = '1.3.1'
        lombokVersion = '1.16.20'
        mysqlDriverVersion = '6.0.6'
        fastjsonVersion = '1.2.38'
    }
    // JVM 版本号
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    // JAVA编译的时候缺省状态下因为中文字符失败
    //[compileJava,compileTestJava,javadoc]*.option*.encoding = 'UTF-8'

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-netflix:${springNetflixVersion}"
            mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
        }
    }
    repositories {
        mavenLocal()
        maven {
            url "http://maven.aliyun.com/nexus/content/repositories/central"
        }
        maven {
            url 'https://repo.spring.io/libs-milestone'
        }
        mavenCentral()
    }
    configurations {
        all*.exclude module: "spring-boot-starter-tomcat"
        all*.exclude module: "commons-logging"
    }

    dependencies {
        testCompile "junit:junit:${junitVersion}"
        compile "com.squareup.okhttp3:okhttp:${okhttpVersion}"
        compile 'org.springframework.boot:spring-boot-autoconfigure:2.0.0.RC1'
        compile 'org.springframework.boot:spring-boot-starter-web:2.0.0.RC1'
        compile "org.springframework.boot:spring-boot-starter-jetty:${springBootVersion}"
//        compile "org.springframework.boot:spring-boot-devtools:${springBootVersion}"
        compile "io.springfox:springfox-swagger2:${swaggerVersion}"
        compile "io.springfox:springfox-swagger-ui:${swaggerVersion}"
        compile "com.alibaba:fastjson:${fastjsonVersion}"
        compile "net.coobird:thumbnailator:0.4.8"
    }

    jar {
        enabled = true
        manifest {
            attributes("Implementation-Title": "Gradle")
        }
    }

    // 显示当前项目下所有comile的jar
//    task listJars(description:'Display all complie jars') {
//        configurations.compile.each {
//            File file -> println file.name
//        }
//    }

    tasks.withType(JavaCompile) {
        // Try to turn them all off automatically
        options.compilerArgs << '-Xlint:none'
        options.compilerArgs << '-nowarn' // same as '-Xlint:none'

        // Turn them off manually
        options.compilerArgs << '-Xlint:-auxiliaryclass'
        options.compilerArgs << '-Xlint:-cast'
        options.compilerArgs << '-Xlint:-classfile'
        options.compilerArgs << '-Xlint:-deprecation'
        options.compilerArgs << '-Xlint:-dep-ann'
        options.compilerArgs << '-Xlint:-divzero'
        options.compilerArgs << '-Xlint:-empty'
        options.compilerArgs << '-Xlint:-fallthrough'
        options.compilerArgs << '-Xlint:-finally'
        options.compilerArgs << '-Xlint:-options'
        options.compilerArgs << '-Xlint:-overloads'
        options.compilerArgs << '-Xlint:-overrides'
        options.compilerArgs << '-Xlint:-path'
        options.compilerArgs << '-Xlint:-processing'
        options.compilerArgs << '-Xlint:-rawtypes'
        options.compilerArgs << '-Xlint:-serial'
        options.compilerArgs << '-Xlint:-static'
        options.compilerArgs << '-Xlint:-try'
        options.compilerArgs << '-Xlint:-unchecked'
        options.compilerArgs << '-Xlint:-varargs'
    }
}

